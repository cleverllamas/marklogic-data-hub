/*
 * Copyright 2012-2019 MarkLogic Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

buildscript {
    repositories {
        mavenCentral()
        //maven { url 'https://developer.marklogic.com/maven2' }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.9"
    }
}


plugins {
    id 'net.saliman.properties' version '1.4.6'
    id "groovy"
    id "java-gradle-plugin"
    id "maven-publish"
    id "com.jfrog.bintray" version "1.7.3"
    id 'org.springframework.boot' version '2.0.6.RELEASE'
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

apply plugin: "com.gradle.plugin-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar.enabled = false
jar.enabled = true

repositories {
    mavenCentral()
    maven { url 'https://developer.marklogic.com/maven2' }
}

dependencies {
    implementation gradleApi()
    implementation (project(':marklogic-data-hub')) {
        exclude group: 'ch.qos.logback'
    }
    implementation ('com.marklogic:ml-gradle:4.5.2') {
        exclude group: 'ch.qos.logback'
    }
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation "org.apache.commons:commons-lang3:3.12.0"
    //implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '2.0.6.RELEASE'

    testImplementation localGroovy()
    testImplementation gradleTestKit()
    testImplementation 'xmlunit:xmlunit:1.6'

    testImplementation('org.spockframework:spock-spring:2.0-groovy-3.0') {
        exclude module: 'groovy-all'
    }
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude module: 'groovy-all'
    }

    testImplementation ('org.springframework.boot:spring-boot-starter-test:2.0.6.RELEASE') {
        exclude module: "logback-classic"
    }
    testImplementation 'org.jdom:jdom2:2.0.6.1'

}

springBoot {
    mainClassName = 'com.marklogic.hub.ApplicationConfig'
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
    }
    // fullcycle tests also exercise provisioning, so on thie PR removing
    // TODO put fullcycle tests in another project?
    //include 'com/marklogic/gradle/fullcycle/**'
    include 'com/marklogic/gradle/task/**'
    classpath = project.sourceSets.main.runtimeClasspath + project.sourceSets.test.runtimeClasspath
    useJUnitPlatform()
}

task testFullCycle(type: Test) {
    useJUnit {
        include 'com/marklogic/gradle/fullcycle/**'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
}

bootRun {
    enabled = false
}

group = 'com.marklogic'

publishing {
    publications {
        main(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
    repositories {
        maven {
          if(project.hasProperty("mavenUser")) {
            credentials {
            username mavenUser
            password mavenPassword
            }
          }
          url publishUrl
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['main']
    pkg {
        repo = 'maven'
        name = 'ml-data-hub'
        desc = 'A gradle plugin for Data Hub tasks'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/marklogic/marklogic-data-hub'
        issueTrackerUrl = 'https://github.com/marklogic/marklogic-data-hub/issues'
    }
}

pluginBundle {
    website = 'https://marklogic.github.io/marklogic-data-hub/'
    vcsUrl = 'https://github.com/marklogic/marklogic-data-hub.git'
    description = 'ml-data-hub A gradle plugin for Data Hub tasks'
    tags = ['marklogic', 'data hub']

    plugins {
        mldatahubPlugin {
            id = 'com.marklogic.ml-data-hub'
            displayName = 'Gradle tasks for MarkLogic Data Hub'
            description = 'Gradle plugin for configuring and deploying the MarkLogic Data Hub'
            tags = ['marklogic', 'data hub']
        }
    }
}
